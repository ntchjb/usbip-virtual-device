// Code generated by MockGen. DO NOT EDIT.
// Source: ./usb/registrar.go
//
// Generated by this command:
//
//	mockgen -source=./usb/registrar.go -destination=./usb/mock_registrar.go -package=usb
//

// Package usb is a generated GoMock package.
package usb

import (
	reflect "reflect"

	protocol "github.com/ntchjb/usbip-virtual-device/usb/protocol"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceRegistrar is a mock of DeviceRegistrar interface.
type MockDeviceRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRegistrarMockRecorder
}

// MockDeviceRegistrarMockRecorder is the mock recorder for MockDeviceRegistrar.
type MockDeviceRegistrarMockRecorder struct {
	mock *MockDeviceRegistrar
}

// NewMockDeviceRegistrar creates a new mock instance.
func NewMockDeviceRegistrar(ctrl *gomock.Controller) *MockDeviceRegistrar {
	mock := &MockDeviceRegistrar{ctrl: ctrl}
	mock.recorder = &MockDeviceRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRegistrar) EXPECT() *MockDeviceRegistrarMockRecorder {
	return m.recorder
}

// GetAvailableDevices mocks base method.
func (m *MockDeviceRegistrar) GetAvailableDevices() []Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableDevices")
	ret0, _ := ret[0].([]Device)
	return ret0
}

// GetAvailableDevices indicates an expected call of GetAvailableDevices.
func (mr *MockDeviceRegistrarMockRecorder) GetAvailableDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableDevices", reflect.TypeOf((*MockDeviceRegistrar)(nil).GetAvailableDevices))
}

// GetDevice mocks base method.
func (m *MockDeviceRegistrar) GetDevice(busID protocol.BusID) (Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", busID)
	ret0, _ := ret[0].(Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockDeviceRegistrarMockRecorder) GetDevice(busID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceRegistrar)(nil).GetDevice), busID)
}

// Register mocks base method.
func (m *MockDeviceRegistrar) Register(device Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockDeviceRegistrarMockRecorder) Register(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDeviceRegistrar)(nil).Register), device)
}
