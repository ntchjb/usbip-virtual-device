// Code generated by MockGen. DO NOT EDIT.
// Source: ./usb/device.go
//
// Generated by this command:
//
//	mockgen -source=./usb/device.go -destination=./usb/mock_device.go -package=usb
//

// Package usb is a generated GoMock package.
package usb

import (
	reflect "reflect"

	protocol "github.com/ntchjb/usbip-virtual-device/usb/protocol"
	command "github.com/ntchjb/usbip-virtual-device/usbip/protocol/command"
	op "github.com/ntchjb/usbip-virtual-device/usbip/protocol/op"
	gomock "go.uber.org/mock/gomock"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// GetBusID mocks base method.
func (m *MockDevice) GetBusID() protocol.BusID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusID")
	ret0, _ := ret[0].(protocol.BusID)
	return ret0
}

// GetBusID indicates an expected call of GetBusID.
func (mr *MockDeviceMockRecorder) GetBusID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusID", reflect.TypeOf((*MockDevice)(nil).GetBusID))
}

// GetDeviceInfo mocks base method.
func (m *MockDevice) GetDeviceInfo() op.DeviceInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInfo")
	ret0, _ := ret[0].(op.DeviceInfo)
	return ret0
}

// GetDeviceInfo indicates an expected call of GetDeviceInfo.
func (mr *MockDeviceMockRecorder) GetDeviceInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInfo", reflect.TypeOf((*MockDevice)(nil).GetDeviceInfo))
}

// GetWorkerPoolProfile mocks base method.
func (m *MockDevice) GetWorkerPoolProfile() WorkerPoolProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerPoolProfile")
	ret0, _ := ret[0].(WorkerPoolProfile)
	return ret0
}

// GetWorkerPoolProfile indicates an expected call of GetWorkerPoolProfile.
func (mr *MockDeviceMockRecorder) GetWorkerPoolProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerPoolProfile", reflect.TypeOf((*MockDevice)(nil).GetWorkerPoolProfile))
}

// Process mocks base method.
func (m *MockDevice) Process(data command.CmdSubmit) command.RetSubmit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", data)
	ret0, _ := ret[0].(command.RetSubmit)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockDeviceMockRecorder) Process(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockDevice)(nil).Process), data)
}

// SetBusID mocks base method.
func (m *MockDevice) SetBusID(busNum, devNum uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBusID", busNum, devNum)
}

// SetBusID indicates an expected call of SetBusID.
func (mr *MockDeviceMockRecorder) SetBusID(busNum, devNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBusID", reflect.TypeOf((*MockDevice)(nil).SetBusID), busNum, devNum)
}
