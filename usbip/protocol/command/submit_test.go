package command_test

import (
	"bytes"
	"testing"

	"github.com/ntchjb/usbip-virtual-device/usbip/protocol"
	"github.com/ntchjb/usbip-virtual-device/usbip/protocol/command"
	"github.com/stretchr/testify/assert"
)

func TestCmdSubmit(t *testing.T) {
	tests := []struct {
		name          string
		header        command.CmdHeader
		objEnc        protocol.Serializer
		objGen        func() protocol.Serializer
		expectedBytes []byte
	}{
		{
			name: "CmdSubmit - Transfer data OUT",
			objEnc: &command.CmdSubmit{
				CmdHeader: command.CmdHeader{
					Direction: command.DIR_OUT,
				},
				TransferFlags:        0x00000004,
				TransferBufferLength: 0x00000064,
				StartFrame:           0x00000000,
				NumberOfPackets:      0xffffffff,
				Interval:             0x01020304,
				Setup:                [8]byte{},
				TransferBuffer: []byte{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				},
			},
			objGen: func() protocol.Serializer {
				return &command.CmdSubmit{
					CmdHeader: command.CmdHeader{
						Direction: command.DIR_OUT,
					},
				}
			},
			expectedBytes: []byte{
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x64,
				0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff,
				0x01, 0x02, 0x03, 0x04,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
			},
		},
		{
			name: "CmdSubmit - Transfer data IN",
			objEnc: &command.CmdSubmit{
				CmdHeader: command.CmdHeader{
					Direction: command.DIR_IN,
				},
				TransferFlags:        0x00000004,
				TransferBufferLength: 0x00000064,
				StartFrame:           0x00000000,
				NumberOfPackets:      0xffffffff,
				Interval:             0x01020304,
				Setup:                [8]byte{},
			},
			objGen: func() protocol.Serializer {
				return &command.CmdSubmit{
					CmdHeader: command.CmdHeader{
						Direction: command.DIR_IN,
					},
				}
			},
			expectedBytes: []byte{
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x64,
				0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff,
				0x01, 0x02, 0x03, 0x04,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name: "CmdSubmit - Transfer isochronous",
			objEnc: &command.CmdSubmit{
				CmdHeader: command.CmdHeader{
					Direction: command.DIR_IN,
				},
				TransferFlags:        0x00000004,
				TransferBufferLength: 0x00000064,
				StartFrame:           0x01020304,
				NumberOfPackets:      0x00000005,
				Interval:             0x01020304,
				Setup:                [8]byte{},
				ISOPacketDescriptors: []command.ISOPacketDescriptor{
					{
						Offset:         0x00000001,
						ExpectedLength: 0x00000001,
						ActualLength:   0x00000001,
						Status:         0x00000001,
					},
					{
						Offset:         0x00000002,
						ExpectedLength: 0x00000002,
						ActualLength:   0x00000002,
						Status:         0x00000002,
					},
					{
						Offset:         0x00000003,
						ExpectedLength: 0x00000003,
						ActualLength:   0x00000003,
						Status:         0x00000003,
					},
					{
						Offset:         0x00000004,
						ExpectedLength: 0x00000004,
						ActualLength:   0x00000004,
						Status:         0x00000004,
					},
					{
						Offset:         0x00000005,
						ExpectedLength: 0x00000005,
						ActualLength:   0x00000005,
						Status:         0x00000005,
					},
				},
			},
			objGen: func() protocol.Serializer {
				return &command.CmdSubmit{
					CmdHeader: command.CmdHeader{
						Direction: command.DIR_IN,
					},
				}
			},
			expectedBytes: []byte{
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x64,
				0x01, 0x02, 0x03, 0x04,
				0x00, 0x00, 0x00, 0x05,
				0x01, 0x02, 0x03, 0x04,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x05,
				0x00, 0x00, 0x00, 0x05,
				0x00, 0x00, 0x00, 0x05,
				0x00, 0x00, 0x00, 0x05,
			},
		},
		{
			name: "CmdSubmit - Transfer setup",
			objEnc: &command.CmdSubmit{
				CmdHeader: command.CmdHeader{
					Direction: command.DIR_OUT,
				},
				TransferFlags:        0x00000004,
				TransferBufferLength: 0x00000000,
				StartFrame:           0x00000000,
				NumberOfPackets:      0xffffffff,
				Interval:             0x01020304,
				Setup: [8]byte{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
				},
			},
			objGen: func() protocol.Serializer {
				return &command.CmdSubmit{
					CmdHeader: command.CmdHeader{
						Direction: command.DIR_OUT,
					},
				}
			},
			expectedBytes: []byte{
				0x00, 0x00, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff,
				0x01, 0x02, 0x03, 0x04,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
			},
		},
		{
			name: "RetSubmit - Transfer IN",
			objEnc: &command.RetSubmit{
				CmdHeader: command.CmdHeader{
					Direction: command.DIR_IN,
				},
				Status:          0x00000001,
				ActualLength:    0x00000064,
				StartFrame:      0x00000000,
				NumberOfPackets: 0xffffffff,

				ErrorCount: 0x00000001,
				Padding:    0x0000000000000000,
				TransferBuffer: []byte{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				},
			},
			objGen: func() protocol.Serializer {
				return &command.RetSubmit{
					CmdHeader: command.CmdHeader{
						Direction: command.DIR_IN,
					},
				}
			},
			expectedBytes: []byte{
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x64,
				0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
			},
		},
		{
			name: "RetSubmit - Transfer OUT",
			objEnc: &command.RetSubmit{
				CmdHeader: command.CmdHeader{
					Direction: command.DIR_OUT,
				},
				Status:          0x00000001,
				ActualLength:    0x00000064,
				StartFrame:      0x00000000,
				NumberOfPackets: 0xffffffff,
				ErrorCount:      0x00000001,
				Padding:         0x0000000000000000,
			},
			objGen: func() protocol.Serializer {
				return &command.RetSubmit{
					CmdHeader: command.CmdHeader{
						Direction: command.DIR_OUT,
					},
				}
			},
			expectedBytes: []byte{
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x64,
				0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name: "RetSubmit - Isochronous",
			objEnc: &command.RetSubmit{
				CmdHeader: command.CmdHeader{
					Direction: command.DIR_IN,
				},
				Status:          0x00000001,
				ActualLength:    0x00000000,
				StartFrame:      0x01020304,
				NumberOfPackets: 0x00000003,
				ErrorCount:      0x00000000,
				Padding:         0x0000000000000000,
				ISOPacketDescriptors: []command.ISOPacketDescriptor{
					{
						Offset:         0x00000001,
						ExpectedLength: 0x00000001,
						ActualLength:   0x00000001,
						Status:         0x00000001,
					},
					{
						Offset:         0x00000002,
						ExpectedLength: 0x00000002,
						ActualLength:   0x00000002,
						Status:         0x00000002,
					},
					{
						Offset:         0x00000003,
						ExpectedLength: 0x00000003,
						ActualLength:   0x00000003,
						Status:         0x00000003,
					},
				},
			},
			objGen: func() protocol.Serializer {
				return &command.RetSubmit{
					CmdHeader: command.CmdHeader{
						Direction: command.DIR_IN,
					},
				}
			},
			expectedBytes: []byte{
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x00,
				0x01, 0x02, 0x03, 0x04,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x02,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x03,
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()

			buf := new(bytes.Buffer)
			encodeErr := test.objEnc.Encode(buf)

			assert.NoError(t, encodeErr)
			assert.Equal(t, test.expectedBytes, buf.Bytes())

			newObj := test.objGen()
			decodeErr := newObj.Decode(buf)

			assert.NoError(t, decodeErr)
			assert.Equal(t, test.objEnc, newObj)
		})
	}
}
