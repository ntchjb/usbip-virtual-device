// Code generated by MockGen. DO NOT EDIT.
// Source: ./usbip/handler/worker.go
//
// Generated by this command:
//
//	mockgen -source=./usbip/handler/worker.go -destination=./usbip/handler/mock_worker.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	usb "github.com/ntchjb/usbip-virtual-device/usb"
	command "github.com/ntchjb/usbip-virtual-device/usbip/protocol/command"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerPool is a mock of WorkerPool interface.
type MockWorkerPool struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerPoolMockRecorder
}

// MockWorkerPoolMockRecorder is the mock recorder for MockWorkerPool.
type MockWorkerPoolMockRecorder struct {
	mock *MockWorkerPool
}

// NewMockWorkerPool creates a new mock instance.
func NewMockWorkerPool(ctrl *gomock.Controller) *MockWorkerPool {
	mock := &MockWorkerPool{ctrl: ctrl}
	mock.recorder = &MockWorkerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerPool) EXPECT() *MockWorkerPoolMockRecorder {
	return m.recorder
}

// PublishCmdSubmit mocks base method.
func (m *MockWorkerPool) PublishCmdSubmit(urb command.CmdSubmit) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishCmdSubmit", urb)
}

// PublishCmdSubmit indicates an expected call of PublishCmdSubmit.
func (mr *MockWorkerPoolMockRecorder) PublishCmdSubmit(urb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCmdSubmit", reflect.TypeOf((*MockWorkerPool)(nil).PublishCmdSubmit), urb)
}

// SetDevice mocks base method.
func (m *MockWorkerPool) SetDevice(device usb.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDevice", device)
}

// SetDevice indicates an expected call of SetDevice.
func (mr *MockWorkerPoolMockRecorder) SetDevice(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevice", reflect.TypeOf((*MockWorkerPool)(nil).SetDevice), device)
}

// Start mocks base method.
func (m *MockWorkerPool) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockWorkerPoolMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorkerPool)(nil).Start))
}

// Stop mocks base method.
func (m *MockWorkerPool) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkerPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorkerPool)(nil).Stop))
}

// Unlink mocks base method.
func (m *MockWorkerPool) Unlink(header command.CmdUnlink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlink", header)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockWorkerPoolMockRecorder) Unlink(header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockWorkerPool)(nil).Unlink), header)
}
